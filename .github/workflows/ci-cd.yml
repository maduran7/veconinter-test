name: CI/CD Pipeline para QA y Producción

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - develop

jobs:
  build-test-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout del código
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set up Environment
        run: |
          if [ "${{ github.ref_name }}" == "main" ]; then
            echo "Estableciendo ambiente: Producción"
            echo "ENV_NAME=Production" >> $GITHUB_ENV
            echo "DB_PASSWORD=${{ secrets.PROD_DB_PASSWORD }}" >> $GITHUB_ENV
          else
            echo "Estableciendo ambiente: QA"
            echo "ENV_NAME=QA" >> $GITHUB_ENV
            echo "DB_PASSWORD=${{ secrets.QA_DB_PASSWORD }}" >> $GITHUB_ENV
          fi

      - name: Construir imágenes Docker
        run: docker compose build

      - name: Levantar contenedores
        run: docker compose up -d

      - name: Ejecutar pruebas de integración
        run: |
          echo "Esperando que los servicios se estabilicen..."
          sleep 60
          
          echo "Probando conectividad del Frontend en el puerto 5000..."
          curl -f --retry 5 --retry-delay 5 http://localhost:5000 || exit 1
          
          echo "Probando conectividad de la API en el puerto 5001..."
          curl -f --retry 5 --retry-delay 5 http://localhost:5001/Contenedor || exit 1
          
          echo "¡Pruebas de integración exitosas!"

      - name: Notificación de Éxito
        if: success()
        run: echo "Workflow para el ambiente ${{ env.ENV_NAME }} completado exitosamente."

      - name: Rollback y Diagnóstico en caso de Fallo
        if: failure()
        run: |
          echo "El workflow ha fallado! Recopilando logs para diagnóstico..."
          docker compose logs
          echo "Simulando rollback: Limpiando el entorno..."
          docker compose down -v
          exit 1
          
      - name: Limpieza final del entorno
        if: always()
        run: |
          echo "Limpiando contenedores y volúmenes..."
          docker compose down -v