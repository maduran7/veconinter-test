name: CI/CD Pipeline para QA y Producci√≥n

# Disparadores del workflow
on:
  push:
    branches:
      - main     # Para despliegue a Producci√≥n
      - develop  # Para despliegue a QA
  pull_request:
    branches:
      - develop  # Tambi√©n ejecuta en PRs hacia develop (QA)

jobs:
  build-test-and-deploy:
    runs-on: ubuntu-latest # Usamos un runner de Linux
    
    steps:
      # 1. Clona el c√≥digo del repositorio
      - name: Checkout del c√≥digo
        uses: actions/checkout@v4

      # 2. Configura Docker Buildx para la construcci√≥n de im√°genes
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 3. Inicia sesi√≥n en Docker Hub (Simulaci√≥n de Push)
      # En un escenario real, las im√°genes se subir√≠an a un registro como Docker Hub
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # 4. Configura variables de entorno para QA o Producci√≥n
      - name: Set up Environment
        run: |
          if [ "${{ github.ref_name }}" == "main" ]; then
            echo "Estableciendo ambiente: Producci√≥n"
            echo "ENV_NAME=Production" >> $GITHUB_ENV
            echo "DB_PASSWORD=${{ secrets.PROD_DB_PASSWORD }}" >> $GITHUB_ENV
          else
            echo "Estableciendo ambiente: QA"
            echo "ENV_NAME=QA" >> $GITHUB_ENV
            echo "DB_PASSWORD=${{ secrets.QA_DB_PASSWORD }}" >> $GITHUB_ENV
          fi

      # 5. Construye las im√°genes Docker
      - name: Construir im√°genes Docker
        run: docker-compose build

      # 6. Levanta los contenedores para las pruebas de integraci√≥n
      - name: Levantar contenedores
        run: docker-compose up -d

      # 7. Ejecuta las pruebas de integraci√≥n
      - name: Ejecutar pruebas de integraci√≥n
        run: |
          echo "Esperando que los servicios se estabilicen..."
          sleep 45 # Damos tiempo extra para que las migraciones y el arranque ocurran
          
          echo "Probando conectividad del Frontend en el puerto 5000..."
          curl -f http://localhost:5000 || exit 1
          
          echo "Probando conectividad de la API en el puerto 5001..."
          curl -f http://localhost:5001/Contenedor || exit 1
          
          echo "¬°Pruebas de integraci√≥n exitosas!"

      # 8. Notificaci√≥n de √©xito
      - name: Notificaci√≥n de √âxito
        if: success()
        run: echo "‚úÖ Workflow para el ambiente ${{ env.ENV_NAME }} completado exitosamente."

      # 9. Rollback simulado y logs en caso de fallo
      - name: Rollback y Diagn√≥stico en caso de Fallo
        if: failure()
        run: |
          echo "üö® ¬°El workflow ha fallado! Recopilando logs para diagn√≥stico..."
          docker-compose logs
          echo "Simulando rollback: Limpiando el entorno..."
          docker-compose down -v
          exit 1
          
      # 10. Limpieza final (siempre se ejecuta)
      - name: Limpieza final del entorno
        if: always()
        run: |
          echo "Limpiando contenedores y vol√∫menes..."
          docker-compose down -v